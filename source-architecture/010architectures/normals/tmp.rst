临时
####

.. important:: 目标：形成了自己的一套架构设计方法论。



从0开始学架构
=============

架构设计的思维和程序设计的思维差异很大。
架构设计的关键思维是判断和取舍，程序设计的关键思维是逻辑和实现。

内容::

    1. 架构基础：我会先介绍架构设计的本质、历史背景和目的，然后从复杂度来源以及架构设计的原则和流程来详细介绍架构基础。
    2. 高性能架构模式：我会从存储高性能、计算高性能方面，介绍几种设计方案的典型特征和应用场景。
    3. 高可用架构模式：我会介绍 CAP 原理、FMEA 分析方法，分析常见的高可用存储架构和高可用计算架构，并给出一些设计方法和技巧。
    4. 可扩展架构模式：我会介绍可扩展模式及其基本思想，分析一些常见架构模式。
    5. 架构实战：我会将理论和案例结合，帮助你落地前面提到的架构原则、架构流程和架构模式。

目标::

    1. 清楚地理解架构设计相关的概念、本质、目的
        避免架构师在实践过程中把握不住重点、分不清主次，眉毛胡子一把抓，导致架构设计变形或者 “四不像” 。
    2. 掌握通用的架构设计原则
        无论是何种业务或技术，架构师在判断和选择的时候有一套方法论可以参考，避免架构设计举棋不定，或者拍脑袋式设计。
    3. 掌握标准的架构设计流程
        即使是刚开始做架构设计的新手，也能够按照步骤一步一步设计出合适的架构，避免某些步骤缺失导致错误的架构设计。
    4. 深入理解已有的架构模式
        做到能够根据架构特点快速挑选合适的模式完成架构设计，或者在已有的模式上进行创新，或者将已有的模式组合出新的架构。
    5. 掌握架构演进和开源系统使用的一些技巧。

概念
----

系统&子系统::

    定义: 
      1. 【系统】泛指由一群有关联的个体组成，根据某种规则运作，能完成个别元件不能单独完成的工作的群体。
      2. 【子系统】也是由一群有关联的个体所组成的系统，多半会是更大系统中的一部分。
      
    系统:
      它的意思是 “总体” “整体” 或 “联盟”。
      关键内容:
        a. 关联: 由一群有关联的个体组成的，没有关联的个体堆在一起不能成为一个系统
        b. 规则: 系统内的个体需要按照指定的规则运作，而不是单个个体各自为政
        c. 能力: 系统能力与个体能力有本质的差别，系统能力不是个体能力之和，而是产生了新的能力

    子系统:
      子系统的定义和系统定义是一样的，只是观察的角度有差异，一个系统可能是另外一个更大系统的子系统。


模块与组件::

    定义: 
    1. 【软件模块（Module）】是一套一致而互相有紧密关连的软件组织。
      它分别包含了程序和数据结构两部分。
      现代软件开发往往利用模块作为合成的单位。
      模块的接口表达了由该模块提供的功能和调用它时所需的元素。
      模块是可能分开被编写的单位。
      这使它们可再用和允许人员同时协作、编写及研究不同的模块。
    2. 【软件组件】定义为自包含的、可编程的、可重用的、与语言无关的软件单元，
      软件组件可以很容易被用于组装应用程序中。

    模块和组件都是系统的组成部分，只是从不同的角度拆分系统而已:
        从逻辑的角度来拆分系统后，得到的单元就是 “模块”；
        从物理的角度来拆分系统后，得到的单元就是 “组件”。

        划分模块的主要目的是职责分离；
        划分组件的主要目的是单元复用。

        注：“组件” 的英文 component 也可翻译成中文的 “零件” 一词，
          “零件” 更容易理解一些，“零件” 是一个物理的概念，并且具备 “独立且可替换” 的特点。

    例: 
      一个学生信息管理系统:
      从逻辑的角度来拆分，可以分为 “登录注册模块”“个人信息模块”“个人成绩模块”；
      从物理的角度来拆分，可以拆分为 Nginx、Web 服务器、MySQL。



框架与架构::

    定义:
      1. 【软件框架（Software framework）】通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，
        也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。
      2. 【软件架构】指软件系统的 “基础结构”，创造这些基础结构的准则，以及对这些结构的描述。
        关键在 “基础结构” 这个概念并没有明确说是从什么角度来分解的
        采用不同的角度或者维度，可以将系统划分为不同的结构
        如:
          a. 从业务逻辑的角度分解，“学生管理系统” 的架构是: 登录模块、个人信息模块、个人成绩模块
          b. 从物理部署的角度分解，“学生管理系统” 的架构是: Nginx、Web 服务器、MySQL
          c. 从开发规范的角度分解，“学生管理系统” 的架构是: MVC 架构
        重新定义: 软件架构指软件系统的顶层结构。

    软件框架-关键部分:
      a. 框架是组件规范: 如MVC, J2EE, MVVM, MVP
      b. 框架提供基础功能的产品: Spring MVC等

    定义的角度来看:
      框架关注的是 “规范”，架构关注的是 “结构”。
      框架的英文是 Framework，架构的英文是 Architecture























